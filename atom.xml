<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>usbcsusbの小窝</title>
  
  
  <link href="https://www.adarkroom.cn/atom.xml" rel="self"/>
  
  <link href="https://www.adarkroom.cn/"/>
  <updated>2023-08-27T13:47:57.000Z</updated>
  <id>https://www.adarkroom.cn/</id>
  
  <author>
    <name>usbcsusb</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>民宿抢单订购系统</title>
    <link href="https://www.adarkroom.cn/posts/cef9dda9/"/>
    <id>https://www.adarkroom.cn/posts/cef9dda9/</id>
    <published>2023-08-27T13:47:57.000Z</published>
    <updated>2023-08-27T13:47:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-支付服务业务架构图"><a class="markdownIt-Anchor" href="#1-支付服务业务架构图"></a> 1、支付服务业务架构图</h4><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272148260.png?adarkroom" alt="image-20220428111821382" style="zoom:50%;" /><h4 id="2-依赖关系"><a class="markdownIt-Anchor" href="#2-依赖关系"></a> 2、依赖关系</h4><p>payment-api（支付api） 依赖 order-rpc（订单rpc）、payment-rpc（支付rpc）、usercenter（用户rpc）</p><p>order-rpc（订单rpc） 依赖 travel-rpc</p><h4 id="3-微信支付举例"><a class="markdownIt-Anchor" href="#3-微信支付举例"></a> 3、微信支付举例</h4><h5 id="31-创建支付预处理订单"><a class="markdownIt-Anchor" href="#31-创建支付预处理订单"></a> 3.1 创建支付预处理订单</h5><p>1、用户在我们这边创建完订单之后，要去微信那边创建预支付订单</p><p>app/payment/cmd/api/desc/payment.api</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//支付服务v1版本的接口</span></span><br><span class="line">@server(</span><br><span class="line">    prefix: payment/v1</span><br><span class="line">    <span class="keyword">group</span>: thirdPayment</span><br><span class="line">)</span><br><span class="line"><span class="keyword">service </span><span class="title class_">payment</span> &#123;</span><br><span class="line">    </span><br><span class="line">    @doc <span class="string">&quot;第三方支付：微信支付&quot;</span></span><br><span class="line">    @handler thirdPaymentwxPay</span><br><span class="line">    post /thirdPayment/thirdPaymentWxPay (ThirdPaymentWxPayReq) returns (ThirdPaymentWxPayResp)</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>app/payment/cmd/api/internal/logic/thirdPayment/thirdPaymentwxPayLogic.go-----&gt;ThirdPaymentwxPay</p><p>见下图，我们创建微信预支付订单时候做了一次封装，因为我们平台后续支付业务肯定不止民宿支付订单，肯定还会有其他的，比如我们后续可以推出商城，推出课程等，所以在这里使用switch做了个业务分类，目前我们只有民宿订单，但是除了查询业务不一样，其他都一样，我们把一样的逻辑封装起来，所以我们继续看封装后的方法createWxPrePayOrder</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272149399.png?adarkroom" alt="image-20220120140054981" /></p><p>app/payment/cmd/api/internal/logic/thirdPayment/thirdPaymentwxPayLogic.go-----&gt;createWxPrePayOrder</p><p>这里就是拿到用户的登陆userId去换openid（这块我们之前注册登陆那里有小程序注册登陆，那时候就获取了openid），然后调用paymentRpc中的CreatePayment创建我们本地的支付流水单号，在通过调用微信sdk-&gt; svc.NewWxPayClientV3(这里是我基于go-zero封装了一次，没啥难度都能看懂) ，</p><p>然后在微信端创建了一个关联我们本地流水单号的预支付订单，返回给前端，前段通过js发起请求即可</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272150406.png?adarkroom" alt="image-20220120140535661" /></p><h5 id="32-微信支付回调"><a class="markdownIt-Anchor" href="#32-微信支付回调"></a> 3.2 微信支付回调</h5><p>当前端拿着我们给的微信预处理订单发起支付，用户输入密码支付成功后，微信服务器会回调我们服务器，回调地址在我们配置中填写的</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272151726.png?adarkroom" alt="image-20220120141041769" /></p><p>这个回调地址，一定要填写我们支付api服务中的回调处理方法,也就是如下图的接口，这样我们才能接收到微信回调进来，我们才可以做后续处理。</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272151116.png?adarkroom" alt="image-20220120141134624" /></p><p>微信回调回来之后，我们要处理回调逻辑，我们要调用verifyAndUpdateState 将我们流水单号改为已支付</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272151765.png?adarkroom" alt="image-20220120141242868" /></p><p>我们来看看verifyAndUpdateState方法，我们要查询单号是否存在，比对回调回来的金额与创建时候金额是否一致更新流水单号即可。这里不用在校验签名了，前一步的sdk已经做了处理了</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272152967.png?adarkroom" alt="image-20220120141413859" /></p><p>这里还要给前端写一个轮训接口，前端用户支付成功后前端不能以前端的微信返回结果为准，要通过后端提供的接口轮训，判断这个流水单是否真的是后端返回支付成功状态，如果这个接口返回成功才算成功，微信前端返回的不能作为依据，因为微信前端返回的不安全，一般开发都明白不知道的自己google。</p><h5 id="33-支付成功发送小程序模版消息"><a class="markdownIt-Anchor" href="#33-支付成功发送小程序模版消息"></a> 3.3 支付成功发送小程序模版消息</h5><p>我们支付回调成功之后，会给用户发送一个入驻码，去了商家那里要展示这个码，商家通过后台核对码，其实就是美团的样子，我们去美团下单，美团会给你个码，用户拿着这个码去入住或者消费等。</p><p>ok，回调成功，我们会调用pyamentRpc去修改当前流水单状态成功</p><p><img src="https://img.adarkroom.cn/adarkroom/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F202308272152129.png?adarkroom" alt="image-20220120142149012" /></p><p>我们来看看paymentRpc中做了什么,go-zero-looklook/app/payment/cmd/rpc/internal/logic/updateTradeStateLogic.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UpdateTradeStateLogic)</span></span> UpdateTradeState(in *pb.UpdateTradeStateReq) (*pb.UpdateTradeStateResp, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    .....</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、update .</span></span><br><span class="line">    thirdPayment.TradeState = in.TradeState</span><br><span class="line">    thirdPayment.TransactionId = in.TransactionId</span><br><span class="line">    thirdPayment.TradeType = in.TradeType</span><br><span class="line">    thirdPayment.TradeStateDesc = in.TradeStateDesc</span><br><span class="line">    thirdPayment.PayStatus = in.PayStatus</span><br><span class="line">    thirdPayment.PayTime = time.Unix(in.PayTime, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">if</span> err := l.svcCtx.ThirdPaymentModel.UpdateWithVersion(l.ctx,<span class="literal">nil</span>, thirdPayment); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(xerr.NewErrCode(xerr.DB_ERROR), <span class="string">&quot; UpdateTradeState UpdateWithVersion db  err:%v ,thirdPayment : %+v , in : %+v&quot;</span>, err,thirdPayment,in)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、notify  sub &quot;payment-update-paystatus-topic&quot;  services(order-mq ..), pub、sub use kq</span></span><br><span class="line">    <span class="keyword">if</span> err:=l.pubKqPaySuccess(in.Sn,in.PayStatus);err != <span class="literal">nil</span>&#123;</span><br><span class="line">        logx.WithContext(l.ctx).Errorf(<span class="string">&quot;l.pubKqPaySuccess : %+v&quot;</span>,err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &amp;pb.UpdateTradeStateResp&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>核心做了两件事情，第一是更新支付状态，第二向消息队列(kafka)发送了一条消息，我们看看消息队列中对应的代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UpdateTradeStateLogic)</span></span> pubKqPaySuccess(orderSn <span class="type">string</span>,payStatus <span class="type">int64</span>) <span class="type">error</span>&#123;</span><br><span class="line"></span><br><span class="line">    m := kqueue.ThirdPaymentUpdatePayStatusNotifyMessage&#123;</span><br><span class="line">        OrderSn:  orderSn ,</span><br><span class="line">        PayStatus: payStatus,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    body, err := json.Marshal(m)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.Wrapf(xerr.NewErrMsg(<span class="string">&quot;kq UpdateTradeStateLogic pushKqPaySuccess task marshal error &quot;</span>), <span class="string">&quot;kq UpdateTradeStateLogic pushKqPaySuccess task marshal error  , v : %+v&quot;</span>, m)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  l.svcCtx.KqueuePaymentUpdatePayStatusClient.Push(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到我们使用了go-queue发送了一条kq消息到kafka，而不是asynq延迟消息（虽然asynq也支持消息队列我只是在这个功能上想演示如何使用go-queue），因为我们想让所有订阅了该支付状态的业务都能收到此消息后做相应的处理，虽然目前我们只有一个地方监听做处理（发送小程序模版消息通知用户支付成功），所以这里就是发了一条该支付流水相关信息到kafka中，这里跟之前订单那里是一样的只是添加消息到队列，没有处理，那我们看看order-mq中怎么处理的。</p><p>go-zero-looklook/app/order/cmd/mq/internal/mqs/kq/paymentUpdateStatus.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> kq</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *PaymentUpdateStatusMq)</span></span> Consume(_, val <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> message kqueue.ThirdPaymentUpdatePayStatusNotifyMessage</span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal([]<span class="type">byte</span>(val), &amp;message); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logx.WithContext(l.ctx).Error(<span class="string">&quot;PaymentUpdateStatusMq-&gt;Consume Unmarshal err : %v , val : %s&quot;</span>, err, val)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := l.execService(message); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        logx.WithContext(l.ctx).Error(<span class="string">&quot;PaymentUpdateStatusMq-&gt;execService  err : %v , val : %s , message:%+v&quot;</span>, err, val, message)</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *PaymentUpdateStatusMq)</span></span> execService(message kqueue.ThirdPaymentUpdatePayStatusNotifyMessage) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">    orderTradeState := l.getOrderTradeStateByPaymentTradeState(message.PayStatus)</span><br><span class="line">    <span class="keyword">if</span> orderTradeState != <span class="number">-99</span> &#123;</span><br><span class="line">        <span class="comment">//update homestay order state</span></span><br><span class="line">        _, err := l.svcCtx.OrderRpc.UpdateHomestayOrderTradeState(l.ctx, &amp;order.UpdateHomestayOrderTradeStateReq&#123;</span><br><span class="line">            Sn:         message.OrderSn,</span><br><span class="line">            TradeState: orderTradeState,</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> errors.Wrapf(xerr.NewErrMsg(<span class="string">&quot;update homestay order state fail&quot;</span>), <span class="string">&quot;update homestay order state fail err : %v ,message:%+v&quot;</span>, err, message)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再来看order-rpc的UpdateHomestayOrderTradeState</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Update homestay order status</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *UpdateHomestayOrderTradeStateLogic)</span></span> UpdateHomestayOrderTradeState(in *pb.UpdateHomestayOrderTradeStateReq) (*pb.UpdateHomestayOrderTradeStateResp, <span class="type">error</span>) &#123;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、Pre-update status judgment.</span></span><br><span class="line">    homestayOrder.TradeState = in.TradeState</span><br><span class="line">    <span class="keyword">if</span> err := l.svcCtx.HomestayOrderModel.UpdateWithVersion(l.ctx,<span class="literal">nil</span>, homestayOrder); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrapf(xerr.NewErrMsg(<span class="string">&quot;Failed to update homestay order status&quot;</span>), <span class="string">&quot;Failed to update homestay order status db UpdateWithVersion err:%v , in : %v&quot;</span>, err, in)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、notify user</span></span><br><span class="line">    <span class="keyword">if</span> in.TradeState == model.HomestayOrderTradeStateWaitUse &#123;</span><br><span class="line">        payload, err := json.Marshal(jobtype.PaySuccessNotifyUserPayload&#123;Order: homestayOrder&#125;)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            logx.WithContext(l.ctx).Errorf(<span class="string">&quot;pay success notify user task json Marshal fail, err :%+v , sn : %s&quot;</span>,err,homestayOrder.Sn)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            _, err := l.svcCtx.AsynqClient.Enqueue(asynq.NewTask(jobtype.MsgPaySuccessNotifyUser, payload))</span><br><span class="line">            <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">                logx.WithContext(l.ctx).Errorf(<span class="string">&quot;pay success notify user  insert queue fail err :%+v , sn : %s&quot;</span>,err,homestayOrder.Sn)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要就是更改订单状态，在发送一条asynq给mqueue-job队列，让mqueue-job发送微信小程序模版消息给用户</p><p>go-zero-looklook/app/mqueue/cmd/job/internal/logic/paySuccessNotifyUser.go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *PaySuccessNotifyUserHandler)</span></span> ProcessTask(ctx context.Context, t *asynq.Task) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> p jobtype.PaySuccessNotifyUserPayload</span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(t.Payload(), &amp;p); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.Wrapf(ErrPaySuccessNotifyFail, <span class="string">&quot;PaySuccessNotifyUserHandler payload err:%v, payLoad:%+v&quot;</span>, err, t.Payload())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、get user openid</span></span><br><span class="line">    usercenterResp, err := l.svcCtx.UsercenterRpc.GetUserAuthByUserId(ctx, &amp;usercenter.GetUserAuthByUserIdReq&#123;</span><br><span class="line">        UserId:   p.Order.UserId,</span><br><span class="line">        AuthType: usercenterModel.UserAuthTypeSmallWX,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.Wrapf(ErrPaySuccessNotifyFail,<span class="string">&quot;pay success notify user fail, rpc get user err:%v , orderSn:%s , userId:%d&quot;</span>,err,p.Order.Sn,p.Order.UserId)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> usercenterResp.UserAuth == <span class="literal">nil</span> || <span class="built_in">len</span>(usercenterResp.UserAuth.AuthKey) == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> errors.Wrapf(ErrPaySuccessNotifyFail,<span class="string">&quot;pay success notify user , user no exists err:%v , orderSn:%s , userId:%d&quot;</span>,err,p.Order.Sn,p.Order.UserId)</span><br><span class="line">    &#125;</span><br><span class="line">    openId := usercenterResp.UserAuth.AuthKey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、send notify</span></span><br><span class="line">    msgs := l.getData(ctx,p.Order,openId)</span><br><span class="line">    <span class="keyword">for</span> _, msg := <span class="keyword">range</span> msgs  &#123;</span><br><span class="line">        l.SendWxMini(ctx,msg)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-支付服务业务架构图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-支付服务业务架构图&quot;&gt;&lt;/a&gt; 1、支付服务业务架构图&lt;/h4&gt;
&lt;img src=&quot;https://img.adarkroom.cn/adarkroom/%E6</summary>
      
    
    
    
    <category term="民宿抢单订购系统" scheme="https://www.adarkroom.cn/categories/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="民宿抢单订购系统" scheme="https://www.adarkroom.cn/tags/%E6%B0%91%E5%AE%BF%E6%8A%A2%E5%8D%95%E8%AE%A2%E8%B4%AD%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Docker安装MySQL8.0 并配置大小写忽略</title>
    <link href="https://www.adarkroom.cn/posts/719eedea/"/>
    <id>https://www.adarkroom.cn/posts/719eedea/</id>
    <published>2023-08-27T13:38:02.000Z</published>
    <updated>2023-08-27T13:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-拉取镜像"><a class="markdownIt-Anchor" href="#一-拉取镜像"></a> 一、拉取镜像</h2><pre><code>.....docker search mysqldocker pull mysql #不写版本号 默认拉取最新版本docker pull mysql:8.0.21 #写版本号，则拉取确定的版本</code></pre><h2 id="二-创建mysql-文件挂载目录"><a class="markdownIt-Anchor" href="#二-创建mysql-文件挂载目录"></a> 二、创建MySQL 文件挂载目录</h2><pre><code>.....sudo mkdir -p /usr/local/mysql/mysql_ikuaiubuntu_master_lower_case_table_names_1/</code></pre><h2 id="三-创建容器"><a class="markdownIt-Anchor" href="#三-创建容器"></a> 三、创建容器</h2><p>记得自行修改3306端口号和mysql密码123456</p><p>如果提示权限不够请看以下教程</p><p><a href="https://kevinmeng.fitit100.com/archives/ubuntudocker-cuo-wu-readonlyfilesystem-de-jie-jue-ban-fa">Ubuntu Docker 错误 Read Only File System的解决办法 - 进一步，海阔天空 (fitit100.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/527276267">ubuntu为用户设置root权限 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/lezeqe/article/details/107351082">(364条消息) Ubuntu：添加docker权限给当前用户（可以使docker命令免sudo）_ubuntu 给用户添加docker权限_lezeqe的博客-CSDN博客</a><br />…</p><pre><code>sudo docker run  -d  \--name mysql_ikuaiubuntu_master_lower_case_table_names_1 \--privileged=true \--restart=always \-p 3306:3306 \-v /usr/local/mysql/mysql_ikuaiubuntu_master_lower_case_table_names_1/data:/var/lib/mysql \-v /usr/local/mysql/mysql_ikuaiubuntu_master_lower_case_table_names_1/config:/etc/mysql/conf.d  \-v /usr/local/mysql/mysql_ikuaiubuntu_master_lower_case_table_names_1/logs:/logs \-e MYSQL_ROOT_PASSWORD=123456 \-e TZ=Asia/Shanghai mysql \--lower_case_table_names=1  </code></pre><p>说明：</p><p>–name mysql_lower_case_table_names_1：给容器命名</p><p>–privileged=true：使用该参数，container内的root拥有真正的root权限。</p><p>–restart=always：开机自启动</p><p>-p 3306:3306：端口映射，第一个 3306 是映射出去的端口，第二个 3306 是这个容器的端口</p><p>-v /usr/local/mysql/mysql_ikuaiubuntu_master_lower_case_table_names_1/data:/var/lib/mysql：文件挂载， : 前为宿主机的目录位置，后为容器内文件对应位置</p><p>-e MYSQL_ROOT_PASSWORD=123456：环境变量设置，此处是设置 ROOT 用户登录密码</p><p>-e TZ=Asia/Shanghai mysql：此处是设置 MySQL 的时区，请注意这点，有时候你可能会发现你的服务器时区和你当前的电脑的时区是不一样的，这很有可能有一些隐藏问题噢。此处的 mysql为镜像名。</p><p>–lower_case_table_names=1：让表名忽略大小写，注意只有在初始化的时候设置 lower_case_table_names=1 才有效<br />如果远程链接不上的话</p><p>#进入容器</p><pre><code>docker exec -it mysql_ikuaiubuntu_master_lower_case_table_names_1 bash</code></pre><p>#登录mysql</p><pre><code>mysql -u root -p123456</code></pre><p>#设置mysql远程权限</p><pre><code>ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456';</code></pre><p>#刷新权限</p><pre><code>flush privileges;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-拉取镜像&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一-拉取镜像&quot;&gt;&lt;/a&gt; 一、拉取镜像&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;.....
docker search mysql

docker pull mysql #不写版本号 </summary>
      
    
    
    
    <category term="改bug" scheme="https://www.adarkroom.cn/categories/%E6%94%B9bug/"/>
    
    
    <category term="改bug" scheme="https://www.adarkroom.cn/tags/%E6%94%B9bug/"/>
    
  </entry>
  
  <entry>
    <title>从抖音的互联网架构到如何构建高可用的系统|青训营</title>
    <link href="https://www.adarkroom.cn/posts/89015d00/"/>
    <id>https://www.adarkroom.cn/posts/89015d00/</id>
    <published>2023-08-27T11:33:45.000Z</published>
    <updated>2023-08-27T11:33:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>近年来，抖音凭借其短视频特色在全球范围内广受欢迎。本文将对其背后的互联网架构进行探讨，尝试理解其系统设计与技术实现，同时考虑如何在相似的情境下构建可靠的高可用系统。专注探讨如下五个核心层面：分布式架构、负载均衡、数据存储与缓存、异步处理以及分布式消息队列。</p><h3 id="一-分布式架构"><a class="markdownIt-Anchor" href="#一-分布式架构"></a> 一、分布式架构</h3><p>分布式架构以利用多个服务器共同完成特定任务的方式大幅提升系统的处理能力。具体到抖音的系统设计，该App在后端服务方面采用了微服务架构，将系统分割成多个独立运行、服务职责明确的微服务，每个微服务由独立的团队负责维护。<br />分布式架构的优点在于，任一微服务的变更并不影响到其他服务的正常运行，从而提高了系统的伸缩性和可维护性。在构建类似的高可用系统时，同样可以参考该模式，以提升系统的运行效率和可靠性。</p><h3 id="二-负载均衡"><a class="markdownIt-Anchor" href="#二-负载均衡"></a> 二、负载均衡</h3><p>负载均衡则是通过合理分配请求到各台服务器上，保证网站的正常运行，避免在突然高流量到来时使系统过载。抖音在这方面的做法便是引入负载均衡器，该设备能实时查看后端服务器的负载情况，根据算法分配用户的请求。</p><p>Nginx Nginx是一款开源的高性能HTTP和反向代理服务器，也可以用作邮件代理服务器。它由Igor Sysoev于2004年创建，并在BSD许可证下发布。</p><p>Nginx的主要特点包括：</p><p>高性能：Nginx采用了异步、事件驱动的处理模型，可以处理大量的并发连接而且资源消耗较低。它具有较低的内存占用和高效的请求处理机制，适用于高负载的Web应用环境。<br />反向代理：Nginx可以作为反向代理服务器，将客户端请求转发给后端的多个服务器。它支持负载均衡和健康检查等功能，可以提供高可用性和扩展性。<br />静态文件服务：Nginx可以高效地处理静态文件的传输，通过配置简单的指令，即可实现静态文件的快速访问和高速传输。<br />动态内容处理：Nginx支持通过FastCGI、uWSGI、SCGI等协议与后端应用服务器（如PHP、Python等）进行通信，处理动态生成的内容。<br />SSL/TLS支持：Nginx内置了对SSL/TLS协议的支持，可以提供安全的HTTPS传输。<br />负载均衡：Nginx支持多种负载均衡策略，如轮询、IP哈希、最少连接数等，可以平衡多个后端服务器的负载，提供更好的性能和高可用性。<br />灵活的配置：Nginx使用简洁而灵活的配置语言，可以通过配置文件进行详细的定制和调整。它支持虚拟主机、URL重写、反向代理缓存等功能。<br />在构建高可用系统时，明智的负载均衡策略不仅能有效缓解高流量下对系统的冲击，同时也提升了系统的计算效率，是不可或缺的一环。</p><h3 id="三-数据存储与缓存"><a class="markdownIt-Anchor" href="#三-数据存储与缓存"></a> 三、数据存储与缓存</h3><p>在数据存储方面，抖音采取典型的HBase数据管理系统。HBase是一种可分布式处理超大规模数据的存储系统，非常适用于处理视频播放的大数据量任务。</p><p>除此之外，抖音同样投入到缓存技术中，如Redis和Memcached等。这些内存数据存储方法大幅降低了对磁盘的读取次数，提高了数据读取速度，增强用户体验。</p><h3 id="四-异步处理"><a class="markdownIt-Anchor" href="#四-异步处理"></a> 四、异步处理</h3><p>异步处理是分布式系统中用来提高系统效率，避免阻塞的重要手段。在抖音的架构中，用户上传视频，赞、评论等行为都通过异步处理的方式进行，系统立即响应用户操作，然后在后端慢慢处理任务，增强了用户体验感。</p><h3 id="五-分布式消息队列"><a class="markdownIt-Anchor" href="#五-分布式消息队列"></a> 五、分布式消息队列</h3><p>抖音在高峰期的流量管理中应用到了分布式消息队列（如RabbitMQ，Kafka等），该技术通过将消息储存在队列中，使得处理能力有限的接收方可以按照自己的速度慢慢处理消息，避免因为大流量而崩溃。</p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><p>总的来说，分布式架构、负载均衡、数据存储与缓存、异步处理、分布式消息队列，这五大主题构成了抖音精巧的互联网架构。</p><p>面对类似场景，我们也需要考虑上述五个维度的问题，实现服务的独立运行和协同工作，合理分配系统的计算资源，优化数据存储与调用方法，提高系统响应效率，最后，利用分布式消息队列对大流量进行有效管理。通过这样的构建，我们可以创建出一个高可靠、高性能、高可用的系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;近年来，抖音凭借其短视频特色在全球范围内广受欢迎。本文将对其背后的互联网架构进行探讨，尝试理解其系统设计与技术实现，同时考虑如何在相似的情境下构</summary>
      
    
    
    
    <category term="字节跳动青训营" scheme="https://www.adarkroom.cn/categories/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
    
    
    <category term="字节跳动青训营" scheme="https://www.adarkroom.cn/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>23 年 8 月学习动态</title>
    <link href="https://www.adarkroom.cn/posts/e55c4bb3/"/>
    <id>https://www.adarkroom.cn/posts/e55c4bb3/</id>
    <published>2023-08-04T02:44:38.000Z</published>
    <updated>2023-08-04T02:44:38.000Z</updated>
    
    
    
    
    <category term="生活" scheme="https://www.adarkroom.cn/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://www.adarkroom.cn/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>字节跳动青训营</title>
    <link href="https://www.adarkroom.cn/posts/5fbcce1d/"/>
    <id>https://www.adarkroom.cn/posts/5fbcce1d/</id>
    <published>2023-08-04T02:33:44.000Z</published>
    <updated>2023-08-04T02:33:44.000Z</updated>
    
    
    
    
    <category term="字节跳动青训营" scheme="https://www.adarkroom.cn/categories/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
    
    
    <category term="字节跳动青训营" scheme="https://www.adarkroom.cn/tags/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E9%9D%92%E8%AE%AD%E8%90%A5/"/>
    
  </entry>
  
  <entry>
    <title>论如何在家开IDC数据中心</title>
    <link href="https://www.adarkroom.cn/posts/d257fca9/"/>
    <id>https://www.adarkroom.cn/posts/d257fca9/</id>
    <published>2023-08-04T02:27:01.000Z</published>
    <updated>2023-08-04T02:27:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>话说在前头，每个人对家庭网络的需求是不一样的，合适自己最好。我也不是什么专业玩家，纯属兴趣爱好，本篇文章分享为主。下面为本人的观点，难免会有些认知误区，烦请大佬指点下，但是拒绝杠精。 你杠你对。</p><p>有些大型任务，单机性能是很难胜任，需要多机一起跑任务。 刚才也提到硬盘速度很快，因此多台机器之间互联速度对于整体集群性能发挥至关重要。Top 500的超算绝大部分是靠机器堆起来的，所以内部高速互联（网络）是不可缺的一个环节。本人也是照着超算的思路在家搭建这么一套的东西，和真正的超算差太远了(毕竟凝聚了无数人的智慧，非常先进)。 本人也是在摸索，觉得非常有意思就把过程分享下</p><p>交换机<br />先从交换机说吧，网络中最重要的一部分。就跟字面意思，能让你在内网从A电脑传数据到B电脑，就这么简单。A电脑和B电脑很大程度上取决于端口速度和中间链接速度。你端口速度是万兆并且能跑到万兆水平，中间是千兆交换机的话，那么你整个传输过程中就千兆水平（木桶效应）。因此有一个高速率的交换机是很好选择，它甚至能保证你未来几年使用不落伍。你可以把交换机类比道路，再想象一下中国为什么是基建狂魔 (这样做能给国家带来什么好处)。你就能明白我为什么会疯狂升级交换机。一台超高吞吐量的交换机在部分人手上非常有价值不代表在你手上就一定有价值！不要再问类似 “有用吗” 的话！</p><p>你可以去Ethernet Roadmap看看自己有没有落伍。目前头部IDC 核心交换机应该是400G的。看似和普通人很遥远，但其实你生活日常上网都少不了IDC的作用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;话说在前头，每个人对家庭网络的需求是不一样的，合适自己最好。我也不是什么专业玩家，纯属兴趣爱好，本篇文章分享为主。下面为本人的观点，难免会有些认知误区，烦请大佬指点下，但是拒绝杠精。 你杠你对。&lt;/p&gt;
&lt;p&gt;有些大型任务，单机性能是很难胜任，需要多机一起跑任务。 刚才也提</summary>
      
    
    
    
    <category term="在家开IDC" scheme="https://www.adarkroom.cn/categories/%E5%9C%A8%E5%AE%B6%E5%BC%80IDC/"/>
    
    
    <category term="在家开IDC" scheme="https://www.adarkroom.cn/tags/%E5%9C%A8%E5%AE%B6%E5%BC%80IDC/"/>
    
  </entry>
  
  <entry>
    <title>解决sqljdbc4爆红</title>
    <link href="https://www.adarkroom.cn/posts/9629187d/"/>
    <id>https://www.adarkroom.cn/posts/9629187d/</id>
    <published>2023-08-03T15:53:49.000Z</published>
    <updated>2023-08-03T15:53:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>网上的好多sqljdbc4.jar链接都失效，而且官网链接貌似变成6.0版本了emmm ，我这里主要是发一个改文件的蓝奏云 ，如果失效欢迎@我补档</p><h2 id="症状如图"><a class="markdownIt-Anchor" href="#症状如图"></a> 症状如图</h2><img src="https://img.adarkroom.cn/adarkroom/sqljdbc4%E7%88%86%E7%BA%A2.png?adarkroom" alt="image-20220428111821382" style="zoom:50%;" /><p>其实是微软现在已经不允许以maven的方式直接下载该文件了</p><p>推荐手动安装 sqljdbc4.jar</p><h2 id="解决方案"><a class="markdownIt-Anchor" href="#解决方案"></a> 解决方案</h2><p>附上sqljdbc4.jar 的蓝奏云链接</p><p><a href="https://wwi.lanzoup.com/iIwjH0e5pulg">sqljdbc4.jar - 蓝奏云</a></p><p>下载后，改名为sqljdbc4-4.0.jar，放到maven仓库里，以我自己的路径举例.</p><img src="https://img.adarkroom.cn/adarkroom/%E8%A7%A3%E5%86%B3sqljdbc4%E7%88%86%E7%BA%A2202308272135068.png?adarkroom" style="zoom:50%;" /><p>这个你在idea里面可以看到</p><img src="https://img.adarkroom.cn/adarkroom/%E8%A7%A3%E5%86%B3sqljdbc4%E7%88%86%E7%BA%A2202308272131475.png?adarkroom" style="zoom:50%;" /><p>放好后，刷新maven即可</p><img src="https://img.adarkroom.cn/adarkroom/%E8%A7%A3%E5%86%B3sqljdbc4%E7%88%86%E7%BA%A2202308272132659.png?adarkroom" style="zoom:50%;" /><p>点图中的刷新按钮即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网上的好多sqljdbc4.jar链接都失效，而且官网链接貌似变成6.0版本了emmm ，我这里主要是发一个改文件的蓝奏云 ，如果失效欢迎@我补档&lt;/p&gt;
&lt;h2 id=&quot;症状如图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#症状如图&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="改bug" scheme="https://www.adarkroom.cn/categories/%E6%94%B9bug/"/>
    
    
    <category term="改bug" scheme="https://www.adarkroom.cn/tags/%E6%94%B9bug/"/>
    
  </entry>
  
</feed>
